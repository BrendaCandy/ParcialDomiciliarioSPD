//DEFINE LOS LEDS DE LOS DISPLAYS
#define LED_A 12
#define LED_B 13
#define LED_C 5
#define LED_D 6
#define LED_E 7
#define LED_F 11
#define LED_G 10

//DEFINE LOS PULSADORES
#define BOTON_SUBE 4
#define BOTON_BAJA 3
#define BOTON_REINICIO 2

//DEFINE CADA DISPLAY
#define UNIDAD A4
#define DECENA A5

//DEFINE EL ESTADO APAGADO PARA LOS DISPLAYS
#define APAGADOS 0

//DEFINE EL TIEMPO QUE SE VA A MANTENER PRENDIDO UN DISPLAY
#define TIMEDISPLAYON 10

//DEFINE EL SWITCH
#define SWITCH 9

//DEFINE EL EL MOTOR
#define MOTOR 8

//DEFINO EL SENSOR
#define SENSOR A0

//variables para el control de la temperatura
int lecturaSensor;
int temperatura;
int TEMPERATURAMINIMA = 60;
int TEMPERATURAMAXIMA = 90;
//El contador define qué número se va a mostrar en los displays
int contador = 0;
//variables para controlar los pulsadores
int sube = 1;
int anteriorSube = 1;
int baja = 1;
int anteriorBaja = 1;
int reinicio = 1;
int anteriorReinicio = 1;
int estadoSwitchPrevia = 1;

void setup()
{ 
  pinMode(BOTON_SUBE, INPUT_PULLUP);
  pinMode(BOTON_BAJA, INPUT_PULLUP);
  pinMode(BOTON_REINICIO, INPUT_PULLUP);
  pinMode(SWITCH, INPUT_PULLUP);
  pinMode(UNIDAD, OUTPUT);
  pinMode(DECENA, OUTPUT);
  pinMode(MOTOR, OUTPUT);
  pinMode(LED_A, OUTPUT);
  pinMode(LED_B, OUTPUT);
  pinMode(LED_C, OUTPUT);
  pinMode(LED_D, OUTPUT);
  pinMode(LED_E, OUTPUT);
  pinMode(LED_F, OUTPUT);
  pinMode(LED_G, OUTPUT);

  //INICIALIZO LOS DISPLAYS EN ESTADO APAGADO
   prendeDisplay(APAGADOS);
}

void loop()
{ 
  //Lectura del sensor de temperatura
  lecturaSensor = analogRead(SENSOR); 
  
  if (controlarMotor(lecturaSensor))// Si el motor está encendido se encienden los displays y se habilita su funcionamiento
  {
  	int estadoSwitch = digitalRead(SWITCH);
  	int botonPresionado = estadoBoton();
    
    if (botonPresionado == BOTON_REINICIO)
    {
      contador = 0;//Restablecer el contador si se presiona RESET
    }
    else if (!controlarInterruptor(estadoSwitch))
    {
      //Si el interruptor cambio su estado , resetear el contador a 0
      interruptorApagado(botonPresionado);
    }
    else
    {
      interruptorEncendido(botonPresionado);
    }
    mostrarContador(contador);
  }  
  else
  {
  	prendeDisplay(APAGADOS);//Apagar los displays si el motor esta apagado
  }
}

bool controlarInterruptor(int estadoSwitch)
{  
  bool prendido = false;
  
  if(estadoSwitch == 0)
  {
     prendido = true;
  }

  if(estadoSwitch == !estadoSwitchPrevia)
  {
    estadoSwitchPrevia = estadoSwitch;
    contador = 0;// Reiniciar el contador si el interruptor cambió
  }
  return prendido;
}
bool controlarMotor(int lecturaSensor)
{
  bool estadoDelMotor;
  temperatura = map(lecturaSensor, 20, 358, -40, 125);
  //Verificar si la temperatura está dentro del rango requerido
  if (temperatura >= TEMPERATURAMINIMA && temperatura <= TEMPERATURAMAXIMA)
  {
    digitalWrite(MOTOR, HIGH); // Enciende el motor
    estadoDelMotor = true;
  }
  else
  {
    digitalWrite(MOTOR, LOW); // Apaga el motor
    estadoDelMotor = false;
  }
  return estadoDelMotor;
}
void interruptorApagado(int botonPresionado)
//Funcion que maneja los contadores sin numeros primos
{
  if (botonPresionado == BOTON_SUBE)
  {
    //Incrementa el contador y reinicia a 0 si supera a 99
    contador ++;
    if (contador > 99)
      contador = 0;
  }
  else if (botonPresionado == BOTON_BAJA)
  {
    //Decreentar el contador y reinicia a 99 si es negativo
    contador --;
    if (contador < 0)
      contador = 99;
  }
}
void interruptorEncendido(int botonPresionado)
//Funcion que maneja los contadores en numeros primos
{
	if (botonPresionado == BOTON_SUBE)
    {
      //Incrementa el contador al encontrar numero primo
      contador += 1;
      for (contador; ;contador++)
      {
        if (esPrimo(contador))
        {
          if (contador >= 99)
          {
            contador = 0;//Reiniciar a 0 si llega al 99
          }
          break;
        }
      }
    }
    else if (botonPresionado == BOTON_BAJA)
      {
        //Decrementa el contador al encontrar numeros primos
        contador -= 1;
        for (contador; contador > 1; contador -=1)
        {
          if (esPrimo(contador))
          {
            break;
          }
        }
        if (contador <= 1)
        {
          contador = 99;//Reinicia a 99 si es menor o igual a 1
        }
      }
}
void prendeDisplay (int digito)
{
	if (digito == UNIDAD)
    {
      digitalWrite(UNIDAD, LOW);
      digitalWrite(DECENA, HIGH);
      delay(TIMEDISPLAYON);
    }
    else if (digito == DECENA)
    {
      digitalWrite(UNIDAD, HIGH);
      digitalWrite(DECENA, LOW);
      delay(TIMEDISPLAYON);
    }
  	else
    {
      digitalWrite(UNIDAD, HIGH);
      digitalWrite(DECENA, HIGH);
    }
}
void mostrarContador (int contador)
{
    //APAGO LOS DISPLAYS PARA TENER CONTROL DE CADA UNO
	prendeDisplay(APAGADOS);
    //PRIMERO DIBUJO LAS DECENAS
  	mostrarNumero((int)contador/10);
    //PRENDO EL DISPLAY DE LAS DECENAS
  	prendeDisplay(DECENA);
    //LOS VUELVO A APAGAR PARA YA NO TOCAR EL DISPLAY DE LAS DECENAS
  	prendeDisplay(APAGADOS);
  	//DIBUJO LAS UNIDADES
    mostrarNumero(contador - 10*((int)contador/10));
  	//PRENDO EL DISPLAY DE LAS UNIDADES
    prendeDisplay(UNIDAD);
}
    
int estadoBoton()
{
    /*Esta funcion devuelve el boton que fue presionado o 0 
    en el caso de que ninguno haya sido presionado*/
	sube = digitalRead(BOTON_SUBE);// Al ser declarado input_pullup devuelve 0 SI SE PRESIONÓ, 1 SI NO SE PRESIONÓ
	baja = digitalRead(BOTON_BAJA);
    reinicio = digitalRead(BOTON_REINICIO);
    // COMPRUEBO SI LOS PULSADORES ESTÁN SIN PRESIONAR
  	if (sube)
    	anteriorSube = 1;//EL ESTADO ANTERIOR DEL PULSADOR ES SIN PRESIONAR
  	if (baja)
    	anteriorBaja = 1;
  	if (reinicio)
    	anteriorReinicio = 1;
    // COMPRUEBO SI EL PULSADOR PRESIONADO ESTABA "SIN PRESIONAR" 
    if (sube == 0 && sube != anteriorSube)
    {
    	anteriorSube = sube;//EL ESTADO ANTERIOR DEL PULSADOR AHORA ES PRESIONADO
      	return BOTON_SUBE;
    }
	if (baja == 0 && baja != anteriorBaja)
    {
    	anteriorBaja = baja;
      	return BOTON_BAJA;
    }
  	if (reinicio == 0 && reinicio != anteriorReinicio)
    {
    	anteriorReinicio = reinicio;
      	return BOTON_REINICIO;
    }
  return 0;//NO SE PRESIONÓ NINGÚN BOTÓN O SE MANTUVO PRESIONADO EL MISMO
}
void mostrarNumero(int numero)
{	
  //Funcion encargada de componer numeros en el display
  	switch (numero)
    {
      case 0:
      configurarDisplay(1,1,1,1,1,1,0);
      break;
      case 1:
      configurarDisplay(0,1,1,0,0,0,0);
      break;
      case 2:
      configurarDisplay(1,1,0,1,1,0,1);
      break;
      case 3:
      configurarDisplay(1,1,1,1,0,0,1);
      break;
      case 4:
      configurarDisplay(0,1,1,0,0,1,1);
      break;
      case 5:
      configurarDisplay(1,0,1,1,0,1,1);
      break;
      case 6:
      configurarDisplay(1,0,1,1,1,1,1);	
      break;
      case 7:
      configurarDisplay(1,1,1,0,0,0,0);
      break;
      case 8:
      configurarDisplay(1,1,1,1,1,1,1);
      break;
      case 9:
      configurarDisplay(1,1,1,1,0,1,1);
      break;
    }
}
void configurarDisplay(int a, int b, int c, int d, int e, int f, int g)
{
  digitalWrite(LED_A,a);
  digitalWrite(LED_B,b);
  digitalWrite(LED_C,c);
  digitalWrite(LED_D,d);
  digitalWrite(LED_E,e);
  digitalWrite(LED_F,f);
  digitalWrite(LED_G,g);
}

bool esPrimo(int numero)
{
 /*Esta funcion devuelve TRUE si un numero es primo y FALSE si no lo es*/
  bool esPrimo = true;
  if (numero < 2)
  {
    esPrimo = false; // Los números negativos y 1 no son primos
  }

  for (int i = 2; i <= sqrt(numero); i++)
  {
    if (numero % i == 0)
    {
      esPrimo = false; // El número es divisible por i, no es primo
    }
  }
  return esPrimo; 
}
